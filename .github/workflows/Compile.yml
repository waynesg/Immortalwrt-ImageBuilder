name: Build OpenWrt Firmware

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev \
                                zlib1g-dev gawk genisoimage git gettext libssl-dev xsltproc rsync wget \
                                unzip python3

    - name: Download ImageBuilder
      run: |
        mkdir -p build && cd build
        wget https://mirrors.aliyun.com/openwrt/releases/24.10.2/targets/x86/64/openwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
        tar --use-compress-program=unzstd -xvf openwrt-imagebuilder-*.tar.zst
        mv openwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64 imagebuilder

    - name: Prepare custom IPK packages
      run: |
        cd $GITHUB_WORKSPACE
        bash prepare-packages.sh

    - name: Upload packages_names.txt
      uses: actions/upload-artifact@v4
      with:
        name: ipk-package-list
        path: packages_names.txt

    - name: Copy files and packages to ImageBuilder
      run: |
        cp -r files build/imagebuilder/files
        mkdir -p build/imagebuilder/packages/custom
        cp -v packages/*.ipk build/imagebuilder/packages/custom/
        cp packages_names.txt build/imagebuilder/ 

    - name: Copy .config (optional)
      run: |
        cp -v .config build/imagebuilder/.config || echo "No custom .config found"

    - name: Run build.sh
      run: |
        cd build/imagebuilder
        bash $GITHUB_WORKSPACE/build.sh

    - name: Archive firmware
      run: |
        mkdir -p output
        cp -v build/imagebuilder/output/* output/
        sha256sum output/* > output/sha256sums.txt
    
    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware
        path: output/

    - name: Cleanup old workflow runs (keep latest 3)
      if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
          KEEP: 3
        run: |
          echo "Fetching workflow ID for current workflow..."
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows \
            | jq -r --arg name "${{ github.workflow }}" '.workflows[] | select(.name == $name) | .id')

          if [ -z "$WORKFLOW_ID" ]; then
            echo "‚ùå Workflow ID not found for '${{ github.workflow }}'"
            exit 0
          fi

          echo "‚úÖ Found workflow ID: $WORKFLOW_ID"

          echo "Deleting old workflow runs, keeping the latest $KEEP..."

          gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            --paginate -q '.workflow_runs | .[] | .id' | tail -n +$(($KEEP + 1)) | while read run_id; do
            echo "üóëÔ∏è Deleting workflow run $run_id"
            gh api -X DELETE repos/${{ github.repository }}/actions/runs/$run_id
          done
